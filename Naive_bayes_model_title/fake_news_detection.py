# -*- coding: utf-8 -*-
"""Fake-News-Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nCGndvvfUzJCXLizodZO5lY2hebO-89P
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
dataset = pd.read_csv('/content/drive/My Drive/final_data.csv')

import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus = []
for i in range(0, 46802):
  review = re.sub('[^a-zA-Z]', ' ', dataset['title'][i])
  review = review.lower()
  review = review.split()
  ps = PorterStemmer()
  all_stopwords = stopwords.words('english')
  all_stopwords.remove('not')
  review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
  review = ' '.join(review)
  corpus.append(review)

print(corpus)

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 2000)
X = cv.fit_transform(corpus).toarray()
y = dataset.iloc[:, -1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

#Trying another model

from sklearn.naive_bayes import MultinomialNB
clf = MultinomialNB() 
clf.fit(X_train, y_train)

y_pred1 = classifier.predict(X_test)
print(np.concatenate((y_pred1.reshape(len(y_pred1),1), y_test.reshape(len(y_test),1)),1))

cm_multinomialNB= confusion_matrix(y_test, y_pred)
print(cm_multinomialNB)
accuracy_score(y_test, y_pred1)

#Trying yet another model

from sklearn.linear_model import PassiveAggressiveClassifier
linear_clf = PassiveAggressiveClassifier()
linear_clf.fit(X_train, y_train)

y_pred2 = classifier.predict(X_test)
print(np.concatenate((y_pred1.reshape(len(y_pred2),1), y_test.reshape(len(y_test),1)),1))

cm_classifier= confusion_matrix(y_test, y_pred)
print(cm_classifier)
accuracy_score(y_test, y_pred2)